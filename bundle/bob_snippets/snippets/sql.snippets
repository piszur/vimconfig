# BOB system log
snippet log
	PERFORM bob.syslog('${1:error}','${2:`substitute(matchstr(matchstr(getline('1','$'),'CREATE OR REPLACE FUNCTION'),'CREATE OR REPLACE FUNCTION \zs.*\ze('),'\.','_','g')`}: ${0:entity_not_fond}');
snippet plog
	PERFORM public.bob_syslog( ${1:1}, logParams, '${2:`substitute(matchstr(matchstr(getline('1','$'),'CREATE OR REPLACE FUNCTION'),'CREATE OR REPLACE FUNCTION \zs.*\ze('),'\.','_','g')`}_${3:`repeat('0', 3-len(GetCount('bob.syslog(')+1))``GetCount('bob.syslog(')+1`}' );
# for loop
snippet for
	FOR ${1:i} IN ${2:1}..${3:42} LOOP
		${0}
	END LOOP;
# for loop with select
snippet fors
	FOR ${1:rec} IN (
	  ${2: select}
	) LOOP
		${0}
	END LOOP;
# for loop with collection
snippet forc
	FOR ${1:i} IN ${2:l_var}.first .. $2.last LOOP
		${0: -- dbms_output.put_line($2($1)); }
	END LOOP;
# if then
snippet if
	IF ${1:NOT FOUND} THEN
		${0}
	END IF; -- IF $1 THEN
# if then else
snippet ife
	IF ${1:NOT FOUND} THEN
		${2}
	ELSE -- IF $1 THEN
		${0}
	END IF; -- IF $1 THEN ELSE
# loop for select
snippet loop_for_select
	FOR ${1:recRecord} IN
	  SELECT
	    $7.${2:*}
	  FROM ${3:bob}.${4:ls}_${5:table_name} AS ${6:$5}
	    join+${0}
	  WHERE $6.is_active
	  ORDER BY $6.${7:priority}
	LOOP
	  -- TODO: $1
	END LOOP; -- FOR $1 IN
# loop in array
snippet loop_in_array
	FOREACH ${2:item_$1} IN ARRAY ${1:myArray}
	LOOP
	  ${0:-- TODO: $2}
	END LOOP; -- FOREACH $2 IN ARRAY $1
# loop for 1 .. array
snippet loop_for_array
	FOR ${2:i} IN 1 .. array_length(${1:myArray}, 1)
	LOOP
	  ${0:--  TODO: $1[$2]}
	END LOOP; -- FOR $2 IN 1 .. array_length($1,1)
# JOIN
snippet join
	JOIN ${1:`GetTablename('schema')`}.${2:ls}_${3:table_name} AS ${4:$3}
	  ON ($4.eid = ${6:`GetTablename('alias')`}.${7:$3_id}${8: AND $4.is_active})
# LEFT JOIN
snippet ljoin
	LEFT JOIN ${1:`GetTablename('schema')`}.${2:ls}_${3:table_name} AS ${4:$3}
	  ON ($4.eid} = ${6:`GetTablename('alias')`}.${7:$3_id}${8: AND $4.is_active})
# JOIN...
snippet join+
	${1:JOIN} ${2:`GetTablename('schema')`}.${3:ls}_${4:table_name} AS ${5:$4}
	  ON ($5.eid} = ${6:`GetTablename('alias')`}.${7:$4_id}${8: AND $5.in_active})
	join+
# SELECT (in function)
snippet select
	SELECT
	  $6.${1:eid}
	INTO
	  ${2:tmpID}
	FROM ${3:bob}.${4:ls}_${5:table_name} AS ${6:$5}
	  join+${0}
	WHERE $6.is_active
	LIMIT 1;
# BEGIN ... ROLLBACK
snippet begin
	BEGIN;
	  ${0:-- code}
	ROLLBACK;
# RAISE NOTICE
snippet notice
	RAISE NOTICE 'LOGDEBUG `GetCount('RAISE NOTICE ''LOGDEBUG')+1`: ${1:_EID}:%', $1;
# RAISE WARNING
snippet warning
	RAISE WARNING 'LOGWARNING `GetCount('RAISE WARNING ''LOGDEBUG')+1`: ${1:_EID}:%', $1;
# RAISE EXCEPTION
snippet exception
	RAISE EXCEPTION 'LOGEXCEPTION `GetCount('RAISE EXCEPTION ''LOGDEBUG')+1`: ${1:_EID}:%', $1;
# FOREIGN KEY
snippet foreign_key
	ALTER TABLE ONLY ${1:bob}.${2:table_name}
	  ADD CONSTRAINT $2_${3:field}_id_fkey
	  FOREIGN KEY ($3_id)
	  REFERENCES ${4:$1}.$3(id)
	  ON UPDATE RESTRICT
	  ON DELETE RESTRICT;
	${0}
# FOREIGN KEY
snippet foreign_key
	ALTER TABLE ONLY ${1:bob}.${2:table_name}
	  ADD CONSTRAINT $2_${3:field_name}_id_fkey
	  FOREIGN KEY ($3_id)
	  REFERENCES ${4:$1}.$3(id)
	  ON UPDATE RESTRICT
	  ON DELETE RESTRICT;
	${0}
# COMMENT
snippet comment
	COMMENT ON COLUMN ${1:bob}.${2:table_name}.${3:field_name} IS '${4:$3}';
# ALTER TABLE CHECK
snippet check
	ALTER TABLE ONLY ${1:bob}.${2:table_name}
	  ADD CONSTRAINT $2_${3:field_names}_check
	  CHECK (${4:$3});
	${0}
# ALTER TABLE UNIQUE
snippet unique
	ALTER TABLE ONLY ${1:bob}.${2:table_name}
	  ADD CONSTRAINT $2_${3:field_names}_key
	  UNIQUE (${4:$3});
	${0}
# ALTER TABLE EXCLUDE
snippet exclude
	ALTER TABLE ONLY ${1:bob}.${2:table_name}
	  ADD CONSTRAINT $2_${3:field_names}_excl
	  EXCLUDE (${4:$3} WITH =) WHERE (${5:is_active});
	${0}
# DOMAIN
snippet domain
	-- DROP DOMAIN IF EXISTS $1.$2 CASCADE;
	CREATE DOMAIN ${1:schema}.${2:table_name_status} AS varchar
	  NOT NULL
	  DEFAULT '${3:inactive}'
	  CHECK (value IN ('$3','${4:active}','${5:archive}'));
	COMMENT ON DOMAIN $1.$2 IS '${6:egyed} lehetséges állapotai ($3:inaktív;$4:aktív,$4:archív)';
	${0}
